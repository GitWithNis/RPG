// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPG.Data;

#nullable disable

namespace RPG.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230202081250_RemoveCharArmor")]
    partial class RemoveCharArmor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RPG.Models.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<decimal>("MagicProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("MeleeProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Protection")
                        .HasColumnType("int");

                    b.Property<decimal>("RangeProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Armor");
                });

            modelBuilder.Entity("RPG.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int?>("ChestId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int?>("FeetId")
                        .HasColumnType("int");

                    b.Property<int?>("FingerLId")
                        .HasColumnType("int");

                    b.Property<int?>("FingerRId")
                        .HasColumnType("int");

                    b.Property<int?>("HandsId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int?>("LegsId")
                        .HasColumnType("int");

                    b.Property<decimal>("MagicProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<decimal>("MeleeProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NeckId")
                        .HasColumnType("int");

                    b.Property<int>("Pierce")
                        .HasColumnType("int");

                    b.Property<decimal>("RangedProt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChestId")
                        .IsUnique()
                        .HasFilter("[ChestId] IS NOT NULL");

                    b.HasIndex("FeetId")
                        .IsUnique()
                        .HasFilter("[FeetId] IS NOT NULL");

                    b.HasIndex("FingerLId")
                        .IsUnique()
                        .HasFilter("[FingerLId] IS NOT NULL");

                    b.HasIndex("FingerRId")
                        .IsUnique()
                        .HasFilter("[FingerRId] IS NOT NULL");

                    b.HasIndex("HandsId")
                        .IsUnique()
                        .HasFilter("[HandsId] IS NOT NULL");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.HasIndex("LegsId")
                        .IsUnique()
                        .HasFilter("[LegsId] IS NOT NULL");

                    b.HasIndex("MonsterId")
                        .IsUnique()
                        .HasFilter("[MonsterId] IS NOT NULL");

                    b.HasIndex("NeckId")
                        .IsUnique()
                        .HasFilter("[NeckId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("RPG.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<decimal>("Pierce")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("RPG.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RPG.Models.Armor", b =>
                {
                    b.HasOne("RPG.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPG.Models.Character", b =>
                {
                    b.HasOne("RPG.Models.Armor", "Chest")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "ChestId");

                    b.HasOne("RPG.Models.Armor", "Feet")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "FeetId");

                    b.HasOne("RPG.Models.Armor", "FingerL")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "FingerLId");

                    b.HasOne("RPG.Models.Armor", "FingerR")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "FingerRId");

                    b.HasOne("RPG.Models.Armor", "Hands")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "HandsId");

                    b.HasOne("RPG.Models.Armor", "Head")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "HeadId");

                    b.HasOne("RPG.Models.Armor", "Legs")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "LegsId");

                    b.HasOne("RPG.Models.Monster", "Monster")
                        .WithOne("Character")
                        .HasForeignKey("RPG.Models.Character", "MonsterId");

                    b.HasOne("RPG.Models.Armor", "Neck")
                        .WithOne()
                        .HasForeignKey("RPG.Models.Character", "NeckId");

                    b.HasOne("RPG.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chest");

                    b.Navigation("Feet");

                    b.Navigation("FingerL");

                    b.Navigation("FingerR");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("Legs");

                    b.Navigation("Monster");

                    b.Navigation("Neck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPG.Models.Monster", b =>
                {
                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPG.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
